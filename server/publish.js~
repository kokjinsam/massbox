/*
 * Seller, For item listing
 */
Meteor.publish('products', function(type){
	check(type, String);
	
	if(type != 'active' && type != 'unlisted' && type != 'requested' && type != 'sold') return this.ready();
	if(!this.userId) return this.ready();
	if(!Roles.userIsInRole(this.userId,['seller'])) return this.ready();
	
	var userId = this.userId, 
			products = Product.find({owner:userId, status:type},{
				fields:{
					status:1,
					price:1,
					views:1,
					pictures:1
				}
			});
	
	if(products) return products;
	
	return this.ready(); 
});

/*
 *  Seller, For item editing
 */
Meteor.publish('productDetail', function(docId){
	check(docId, String);
	
	if(!this.userId) return this.ready();
	
	if(!Roles.userIsInRole(this.userId,['seller'])) return this.ready();
	
	var userId = this.userId;
	var product = Product.direct.findOne({_id:docId});
	
	if(userId !== product.owner) return this.ready();
	
	if(product.status == 'sold' || product.status == 'removed' || product.status == 'requested') return this.ready();
	
	var productDetail = Product.find({owner:userId, _id:docId},{
		fields:{
			changes:0,
			views:0
		}
	});
	
	if(productDetail) return productDetail;
	
	return this.ready();
});

/*
 * Seller, For adding pictures
 */
Meteor.publish('productPics', function(docId){
	check(docId, String);
	
	if(!this.userId) return this.ready();
	
	if(!Roles.userIsInRole(this.userId,['seller'])) return this.ready();
	
	var userId = this.userId;
	var product = Product.direct.findOne({_id:docId});
	
	if(userId !== product.owner) return this.ready();
	
	if(product.status == 'sold' || product.status == 'removed' || product.status == 'requested') return this.ready();
	
	var productPics = Product.find({owner:userId, _id:docId},{
		fields:{
			pictures:1
		}
	});
	
	if(productPics) return productPics;
	
	return this.ready();
});

/*
 * Public, For item list viewing
 */

Meteor.publish('productList', function(){	
	return Product.find({status:'active'},{
		fields:{
			price:1,
			views:1,
			pictures:1
		}
	});
});

/*
 * Public, For individual item viewing
 */

Meteor.publish('product', function(docId){
	check(docId, String);
	
	if(!this.userId) return this.ready();
	
	//track views
	var productDoc = Product.findOne({_id:docId});
	if(!productDoc) return this.ready();
	
	if(productDoc.status == 'removed' || productDoc.status == 'sold') this.ready();
	
	var	product = Product.find({_id:docId},{
				fields:{
					changes:0
				}
			}),
			owner = Meteor.users.find({_id:productDoc.owner},{
				fields:{
					name:1
				}
			});
	
	if(product && owner) return [product, owner];
	
	return this.ready();
});

/*
 * Buyer and Seller, For request listing
 */

Meteor.publish('requests', function(type, mode){
	check(type, String);
	check(mode, String);
	
	if(type != 'current' && type != 'pending' && type != 'past') return this.ready();
	if(mode != 'seller' && mode != 'buyer') this.ready();
	if(!this.userId) return this.ready();
	
	var userId = this.userId;
	
	if(mode == 'buyer' && type == 'current'){
		var requests = Request.direct.find({buyer:userId, status:{$in:['accepted', 'incomplete']}, delivered:false});
		if(!requests) return this.ready();
	
		var sellers = requests.map(function(o){return o.seller});
		if(!sellers) return this.ready();
	
		var requests = Request.direct.find({buyer:userId, status:{$in:['accepted', 'incomplete']}, delivered:false},{
					fields:{
						changes:0
					}
				}),
				names = Meteor.users.direct.find({_id:{$in:sellers}},{
					fields:{
						name:1
					}
				});
		
		if(requests && names) return [requests, names];
	}
	
	if(mode == 'seller' && type =='current'){
		var requests = Request.direct.find({seller:userId, status:'accepted', delivered:false});
		if(!requests) return this.ready();
		
		var buyers = requests.map(function(o){return o.buyer});
		if(!buyers) return this.ready();
		
		var requests = Request.direct.find({seller:userId, status:'accepted', delivered:false},{
					fields:{
						changes:0
					}
				}),
				names = Meteor.users.direct.find({_id:{$in:buyers}},{
					fields:{
						name:1
					}
				});
		
		if(requests && names) return [requests, names];
	}
	
	if(mode == 'buyer' && type =='pending'){
		var requests = Request.direct.find({buyer:userId, status:'pending'});
		if(!requests) return this.ready();
	
		var sellers = requests.map(function(o){return o.seller});
		if(!sellers) return this.ready();
	
		var requests = Request.direct.find({buyer:userId, status:'pending'},{
					fields:{
						changes:0
					}
				}),
				names = Meteor.users.direct.find({_id:{$in:sellers}},{
					fields:{
						name:1
					}
				});
		
		if(requests && names) return [requests, names];
	}
	
	if(mode == 'seller' && type =='pending'){
		var requests = Request.direct.find({seller:userId, status:'pending'});
		if(!requests) return this.ready();
		
		var buyers = requests.map(function(o){return o.buyer});
		if(!buyers) return this.ready();
		
		var requests = Request.direct.find({seller:userId, status:'pending'},{
					fields:{
						changes:0
					}
				}),
				names = Meteor.users.direct.find({_id:{$in:buyers}},{
					fields:{
						name:1
					}
				});
		
		if(requests && names) return [requests, names];
	}
	
	if(mode == 'buyer' && type =='past'){
		var requests = Request.direct.find({$or:[{buyer:userId, status:{$in:['canceled', 'declined']}}, {buyer:userId, status:'accepted',delivered:false}]});
		if(!requests) return this.ready();
	
		var sellers = requests.map(function(o){return o.seller});
		if(!sellers) return this.ready();
	
		var requests = Request.direct.find({$or:[{buyer:userId, status:{$in:['canceled', 'declined']}}, {buyer:userId, status:'accepted',delivered:false}]},{
					fields:{
						changes:0
					}
				}),
				names = Meteor.users.direct.find({_id:{$in:sellers}},{
					fields:{
						name:1
					}
				});
		
		if(requests && names) return [requests, names];
	}
	
	if(mode == 'seller' && type =='past'){
		var requests = Request.direct.find({$or:[{seller:userId, status:{$in:['canceled', 'declined']}}, {seller:userId, status:'accepted',delivered:false}]});
		if(!requests) return this.ready();
		
		var buyers = requests.map(function(o){return o.buyer});
		if(!buyers) return this.ready();
		
		var requests = Request.direct.find({$or:[{seller:userId, status:{$in:['canceled', 'declined']}}, {seller:userId, status:'accepted',delivered:false}]},{
					fields:{
						changes:0
					}
				}),
				names = Meteor.users.direct.find({_id:{$in:buyers}},{
					fields:{
						name:1
					}
				});
		
		if(requests && names) return [requests, names];
	}
	
	return this.ready();
});


/*
 * Buyer and Seller, For individual request
 */

Meteor.publish('request', function(requestId){
	check(requestId, String);
	
	if(!this.userId) return this.ready();
	
	var userId = this.userId;
	var requestDoc = Request.findOne({_id:requestId});

	if(requestDoc.buyer !== userId && requestDoc.seller !== userId) return this.ready();
	
	var users = [requestDoc.seller,requestDoc.buyer];
	
	var request = Request.find({_id:requestId},{
			fields:{
				changes:0
			}
		}),
		
		names = Meteor.users.find({_id:{$in:users}},{
			fields:{
				name:1
			}
		}),
		
		productPrice = Product.find({_id:{$in:requestDoc.items}},{
			fields:{
				price:1
			}
		});
		
	if(request && names && productPrice) return [request, names, productPrice];
	
	return this.ready();
});

/*
 * Buyer and Seller, For invidual request editing
 */ 

Meteor.publish('editRequest', function(requestId){
	check(requestId, String);
	
	if(!this.userId) return this.ready();
	
	var userId = this.userId;
	var requestDoc = Request.findOne({_id:requestId});

	if(requestDoc.buyer !== userId && requestDoc.seller !== userId) return this.ready();
	
	if(requestDoc.status == 'declined' || requestDoc.status == 'canceled' || requestDoc.delivered == true) return this.ready();
	
	var editRequest = Request.find({_id:requestId},{
				fields:{
					changes:0
				}
			}),
			productPrice = Product.find({_id:{$in:requestDoc.items}},{
				fields:{
					price:1
				}
			});
			
	if(editRequest && productPrice) return [editRequest, productPrice];
	
	return this.ready();
});

/*
 * User, for individual profile settings viewing
 */

Meteor.publish('userSettings', function(){
	if(!this.userId) return this.ready();
	
	var userId = this.userId,
			profile = Meteor.users.find({_id:userId},{
				fields:{
					dateOfBirth:1,
					preferences:1,
					name:1
				}
			});
	
	if(profile) return profile;
	
	return this.ready();
});

/*
 * User, for onboarding
 */

Meteor.publish('userOnboard', function(){
	if(!this.userId) return this.ready();
	
	var userId = this.userId,
			profile = Meteor.users.find({_id:userId},{
				fields:{
					onboarded:1
				}
			});
	
	if(profile) return profile;
	
	return this.ready();
});

/*
 * Buyer, for message list
 */

Meteor.publish('rooms', function(mode){
	check(mode, String);
	
	if(!this.userId) return this.ready();
	var users = [];
			
	if(mode == 'buyer'){
		var userId = this.userId,
				roomDocs = Room.direct.find({buyer:userId},{
					fields:{
						seller:1
					}
				});
	
		if(!roomDocs) this.ready();
		
		Room.direct.find({buyer:userId}).forEach(function(doc){
			if(users.indexOf(doc.seller) == -1){
				users.push(doc.seller);
			}
		});
	}
	
	if(mode == 'seller'){
		var userId = this.userId,
				roomDocs = Room.direct.find({seller:userId},{
					fields:{
						buyer:1
					}
				});
	
		if(!roomDocs) this.ready();
		
		Room.direct.find({seller:userId}).forEach(function(doc){
			if(users.indexOf(doc.buyer) == -1){
				users.push(doc.buyer);
			}
		});
	}
	
	var names = Meteor.users.find({_id:{$in:users}},{
		fields:{
			name:1
		}
	});
		
	if(names && roomDocs) return [names, roomDocs]; 
	
	return this.ready();
});

Meteor.publish('oneLineMessage', function(mode){
	check(mode, String);
	
	var sub = this;
	var initializing = true;
	
	if(!sub.userId) return this.ready();
	
	var rooms = [],
			userId = sub.userId;
	
	if(mode == 'buyer'){
		var roomDocs = Room.direct.find({buyer:userId});
				
		if(!roomDocs) sub.ready();
		Room.direct.find({buyer:userId}).forEach(function(doc){
			rooms.push(doc._id);
		});
	}
	
	if(mode == 'seller'){
		var roomDocs = Room.direct.find({seller:userId});
				
		if(!roomDocs) sub.ready();
		Room.direct.find({seller:userId}).forEach(function(doc){
			rooms.push(doc._id);
		});
	}
	
	var pipeline =[
		{$match:{room:{$in:rooms}}},
		{$sort:{timestamp:-1}},
		{$group:{_id:"$room",messages:{"$first":"$message"}}}
	];
	
	var query = Message.direct.find({room:{$in:rooms}});
  var handle = query.observeChanges({
    added: function (id) {
      if (!initializing) {
        runAggregation('changed');
      }
    },
    removed: function (id) {
      runAggregation('changed');
    },
    changed: function (id) {
      runAggregation('changed');
    },
    error: function(err){
      throw new Meteor.Error('Uh oh! something went wrong!', err.message);
    }
  });

  initializing = false;
  runAggregation('added');
  
	function runAggregation(action){
    Message.aggregate(pipeline).forEach(function(e) {
      if(action === 'changed'){
        sub.changed('oneLineMessage', e._id, {
          _id: e._id,
          message: e.messages
        });
      }
      else {
        sub.added('oneLineMessage', e._id, {
          _id: e._id,
          message: e.messages
        });
      }
      sub.ready();
    });
  }
  
  sub.onStop(function () {
    handle.stop();
  });
});

/*
 * Buyer, for individual message room viewing
 */

Meteor.publish('room', function(roomId){
	check(roomId, String);
	
	if(!this.userId) return this.ready();
	
	var room = Room.direct.findOne({_id:roomId}),
			userId = this.userId;
	if(!room) return this.ready();
	
	if(room.buyer != userId && room.seller != userId) return this.ready()
	
	var messages = Message.direct.find({room:roomId},{
		fields:{
			sender:1,
			message:1,
			status:1,
			timestamp:1
		}
	});
	
	var users = Meteor.users.find({_id:{$in:[room.buyer, room.seller]}},{
		fields:{
			name:1
		}
	});
	
	if(messages && users) return [messages, users];
	
	return this.ready();
});

